{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","Component","handleClick","this","props","flipCellsAroundMe","render","classes","isLit","className","onClick","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","floor","random","flipCellsAround","coord","split","map","Number","flipCell","every","cell","setState","makeTable","tblBoard","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAGe,MAAMA,UAAaC,YAAW,eAAD,oBAC1CC,YAAc,KACZC,KAAKC,MAAMC,qBAEbC,SACE,IAAIC,EAAU,QAAUJ,KAAKC,MAAMI,MAAQ,YAAc,IACzD,OAAQ,wBAAIC,UAAWF,EAASG,QAASP,KAAKD,e,MCJnC,MAAMS,UAAcV,YAAW,eAAD,oBAM3CW,MAAQ,CACNC,QAAQ,EACRC,MAAOX,KAAKY,eAGdA,cACE,IAAID,EAAQ,GACZ,IAAK,IAAIE,EAAI,EAAGA,EAAIb,KAAKC,MAAMa,MAAOD,IAAK,CACzC,IAAIE,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,KAAKC,MAAMgB,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,MAAuB,EAAhBD,KAAKE,WAE5BV,EAAMO,KAAKH,GAEb,OAAOJ,EAGTW,gBAAgBC,GAAQ,IAAD,EACEvB,KAAKC,MAAtBgB,EADe,EACfA,MAAOH,EADQ,EACRA,MACTH,EAAQX,KAAKS,MAAME,MAFF,EAGRY,EAAMC,MAAM,KAAKC,IAAIC,QAHb,mBAGhBb,EAHgB,KAGbG,EAHa,KAKrB,MAAMW,EAAW,CAACd,EAAGG,KACfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,KAG5BW,EAASd,EAAGG,GACZW,EAASd,EAAGG,EAAI,GAChBW,EAASd,EAAGG,EAAI,GAChBW,EAASd,EAAI,EAAGG,GAChBW,EAASd,EAAI,EAAGG,GAEhB,IAAIN,EAASC,EAAMiB,MAAMb,GAAOA,EAAIa,MAAMC,IAASA,IAEnD7B,KAAK8B,SAAS,CAAEnB,QAAOD,WAGzBqB,YACE,IAAIC,EAAW,GACf,IAAK,IAAInB,EAAI,EAAGA,EAAIb,KAAKC,MAAMa,MAAOD,IAAK,CACzC,IAAIE,EAAM,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,KAAKC,MAAMgB,MAAOD,IAAK,CACzC,IAAIO,EAAK,UAAMV,EAAN,YAAWG,GACpBD,EAAIG,KACF,kBAAC,EAAD,CACEe,IAAKV,EACLlB,MAAOL,KAAKS,MAAME,MAAME,GAAGG,GAC3Bd,kBAAmB,IAAMF,KAAKsB,gBAAgBC,MAIpDS,EAASd,KAAK,wBAAIe,IAAKpB,GAAIE,IAE7B,OACE,2BAAOT,UAAU,SACf,+BAAQ0B,IAId7B,SACE,OACE,6BACGH,KAAKS,MAAMC,OACV,yBAAKJ,UAAU,UACb,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,SAGF,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QAEDN,KAAK+B,eAhFGvB,EACZ0B,aAAe,CACpBpB,MAAO,EACPG,MAAO,G,MCJI,MAAMkB,UAAYrC,YAC/BK,SACE,OACE,yBAAKG,UAAU,OACb,kBAAC,EAAD,QCIY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStC,OAAO,kBAAC,EAAD,MAASuC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.9184f79d.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nexport default class Cell extends Component {\n  handleClick = () => {\n    this.props.flipCellsAroundMe();\n  }\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    return  <td className={classes} onClick={this.handleClick} />;\n  }\n}\n\n\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n\nexport default class Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n  };\n\n  state = {\n    hasWon: false,\n    board: this.createBoard()\n  };\n \n  createBoard() {\n    let board = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.floor((Math.random() * 2)));\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    const flipCell = (y, x) => {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x);\n    flipCell(y, x - 1); \n    flipCell(y, x + 1); \n    flipCell(y - 1, x); \n    flipCell(y + 1, x); \n   \n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board, hasWon});\n  }\n  \n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}